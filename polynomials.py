from manim import *
class polynomialintro(Scene):
    def construct(self):
#creating intro text for polynomials
        poly=Tex("Polynomial",font_size= 60 )
        self.play(Write(poly))
        self.play(poly.animate.shift(2*UP))
        q_poly=Tex("Quadratic Polynomial in one variable in the form of").next_to(poly,2*DOWN)
        self.play(Write(q_poly))
        q_ex=MathTex('ax^{2}+bx+c',color=RED)
        self.play(Write(q_ex))
        q_end_1=MathTex('a','=','0').next_to(q_ex,6*DOWN)
        self.play(Write(q_end_1))
        eq_line=Line(q_end_1[0].get_edge_center(UP),q_end_1[2].get_edge_center(DOWN),buff=0.5)
        self.play(Create(eq_line))
        q_end_gp=VGroup(q_end_1,eq_line)
        self.play(q_end_gp.animate.shift(2*LEFT))
        q_tex=Tex("quadratic polynomial will not exist").next_to(q_end_gp,RIGHT)
        self.play(Write(q_tex))
        self.clear()
        self.wait(1)
    # next screen
        q_eq=MathTex('a','x^{2}','+','b','x','+','c').to_edge(UP)
        self.play(Write(q_eq))
        q_text=Tex('Quadratic equation can have maximum',' 2',' zeros').to_edge(DOWN)
        self.play(Write(q_text))
        self.play(Indicate(q_text[1]))
        q_zer=Tex("Let the zeroes be:").to_edge(DOWN)
        self.play(Transform(q_text,q_zer))
        q_zero=MathTex("\\alpha",",","\\beta").next_to(q_text,RIGHT)
        self.play(Write(q_zero))
        self.play(FadeOut(q_text))
        self.play(q_zero.animate.shift(6.5*UP,1.4*RIGHT))
        q_sum=Tex('Sum of zeros:').to_edge(LEFT)
        q_pro=Tex('Product of zeros:').next_to(q_sum,6*DOWN)
        q_sumzero=MathTex("\\alpha","+","\\beta").next_to(q_sum,RIGHT)
        q_product=MathTex('\\alpha','\\beta').next_to(q_pro,RIGHT)
        self.play(Write(q_sum))
        self.play(Write(q_pro))
        self.play(Write(q_sumzero))
        self.play(Write(q_product))
        please=Tex('coefficient of')
        sum_find=MathTex("=","\\frac{\\text{coefficient of x }}{\\text{coefficient of }x^{2}").next_to(q_sumzero,RIGHT)
        pro_find=MathTex("=","\\frac{constant}{\\text{coefficient of } x^{2}}").next_to(q_product,RIGHT)     
        self.play(Write(sum_find))
        self.play(Write(pro_find))
        q_final=MathTex("=","\\frac{-b}{a}").next_to(sum_find,RIGHT)
        q_final_1=MathTex("=","\\frac{c}{a}").next_to(pro_find,RIGHT)
        self.play(Write(q_final))
        self.play(Write(q_final_1))
        ending=Tex("Now we will verify this ").to_edge(DOWN)
        self.play(Write(ending))
        self.wait(3)
        self.clear()
##examples start from now on.................
        
        ex_eqn=MathTex('P(x)=0','\\to\\',"x^{2}","-6x","+","8","= 0")
        self.play(Write(ex_eqn))
        ex_text=Tex('For solving the equation we will split the middle term in 2 terms',font_size=45).to_edge(DOWN)
        self.play(Write(ex_text))
        self.play(FadeOut(ex_text))
        ex_text2=Tex('Terms should give sum as  the middle turn and product as the product of 1 term and constant',font_size=35).to_edge(DOWN)     
        self.play(Write(ex_text2))
        self.play(ex_eqn.animate.shift(3.5*UP))
        self.play(FadeOut(ex_text2))
        baxxa=SurroundingRectangle(ex_eqn[3])
        self.play(Create(baxxa))
        line_1=Arrow(ex_eqn[3].get_edge_center(DOWN),(0,2,2))
        self.play(Create(line_1))
        line_2=Arrow(ex_eqn[3].get_edge_center(DOWN),(2.8,2,0))
        self.play(Create(line_2))     
    
    #spillting the middle term(explanation)
        q_1_term=MathTex('-x').next_to(ex_eqn[2],6*DOWN)
        q_1_term2=MathTex('-5x').next_to(ex_eqn[6],5.8*DOWN)
        q_2_term=MathTex('-2x').next_to(q_1_term,DOWN)
        q_2_term2=MathTex('-4x').next_to(q_1_term2,DOWN)
        self.play(Write(q_1_term))
        self.play(Write(q_1_term2))
        self.play(Write(q_2_term))
        self.play(Write(q_2_term2))
        q_term_text=Tex('We will chose -2x and -4x as product gives 8x2').to_edge(DOWN)
        baxxa_grp=VGroup(q_2_term,q_2_term2)
        baxxa2=SurroundingRectangle(baxxa_grp)
        self.play(Create(baxxa2))
        self.play(Write(q_term_text))
        fade_grp=VGroup(baxxa2,baxxa_grp,q_1_term,q_1_term2,line_1,line_2,baxxa,)
        self.play(FadeOut(q_term_text))
        self.play(FadeOut(fade_grp))
    ##spillting the middle term real deal
        split_term=MathTex('x^{2}-2x','- 4x+8','=','0').to_corner(LEFT,buff=0.3)
        self.play(Create(split_term))
        baxxa_revenge=SurroundingRectangle(split_term[0])
        baxxa_revenge2=SurroundingRectangle(split_term[1])
        self.play(Create(baxxa_revenge))
        self.play(Create(baxxa_revenge2))
        split_txt=Tex("Taking 'x' common in first term and '4' in next term").to_edge(DOWN)
        self.play(Create(split_txt))
        split_next=MathTex('x(x-2)','-','4(x-2)','= 0').next_to(split_term,1.6*DOWN)
        self.play(Write(split_next))
        baxxa_badla=SurroundingRectangle(split_next[0])
        baxxa_badla2=SurroundingRectangle(split_next[2])
        self.play(FadeOut(split_txt))
        self.play(ReplacementTransform(baxxa_revenge,baxxa_badla))
        self.play(ReplacementTransform(baxxa_revenge2,baxxa_badla2))
        split_txt2=Tex("Taking (x-2) common").to_edge(DOWN)
        self.play(Write(split_txt2))
        baxxa_grp_2=VGroup(baxxa_badla,baxxa_badla2)
        self.play(FadeOut(baxxa_grp_2))
        self.play(FadeOut(split_txt2))
        split_next_fade=VGroup(split_next[0][1],split_next[0][2],split_next[0][3],split_next[0][4],split_next[0][5],split_next[0][0],split_next[2][0],split_next[3],split_next[1])    
        next_grp=VGroup(split_next[2][1],split_next[2][2],split_next[2][3],split_next[2][4],split_next[2][5])
        self.play(FadeOut(next_grp))
        self.play(split_next[2][0].animate.shift(RIGHT))
        self.play(split_next[3].animate.shift(.5*LEFT))
        self.play(split_next[1].animate.shift(RIGHT))
        
        self.play(split_next[0][0].animate.shift(2.6*RIGHT))
        b_cpy=split_next[0][1].copy()
        b_cpy1=split_next[0][5].copy()
        
        self.play(b_cpy.animate.shift(2*RIGHT))
        self.play(b_cpy1.animate.shift(2.1*RIGHT)) 
        last_exp=MathTex('(x-2)','\\times','(x-4)','= 0').to_edge(RIGHT)
        self.play(Write(last_exp))
        text=Tex('As the equation is equal to 0 so (x-2)= 0 and (x-4) =0').to_edge(DOWN)
        self.play(Write(text))
  
        text_1=Tex('Hence the values of x becomes ').to_edge(DOWN)
        self.play(FadeOut(text))
        self.play(Write(text_1))
        
        self.play(FadeOut(last_exp[1]))
        
        last_cpy=last_exp[3].copy()
        self.play(last_exp[2].animate.shift(DOWN))
        self.play(last_exp[0].animate.shift(2*RIGHT))
        self.play(last_cpy.animate.shift(DOWN))
        text_2=Tex('The values of x is 2 and 4').to_edge( DOWN)
        hem_grp=VGroup(last_exp[0],last_exp[3])
        hem_grp2=VGroup(last_exp[2],last_cpy)
        new_val=MathTex('x = 2').to_edge(RIGHT)
        new_val2=MathTex('x = 4').next_to(new_val,DOWN)
        self.play(FadeOut(text_1))
        self.play(Transform(hem_grp,new_val))
        self.play(Transform(hem_grp2,new_val2))
        self.play(Write(text_2))
        text_3=Tex('So the zeros are 2 and 4 as they are the two solutions ').to_edge(DOWN)
        self.play(Transform(text_2,text_3))
        self.play(FadeOut(text_2))
        self.play(FadeOut(split_term))
        fade_grp1=VGroup(b_cpy,b_cpy1)
        self.play(FadeOut(fade_grp1))
        self.play(FadeOut(split_next_fade))
    #marching to the end
        new_terms=MathTex("\\alpha").next_to(hem_grp[0][1],LEFT)
        new_terms1=MathTex("\\beta").next_to(hem_grp2[0][1],LEFT)
        self.play(Transform(hem_grp[0][0],new_terms))
        self.play(Transform(hem_grp2[0][0],new_terms1))
        final_grp=VGroup(new_terms,hem_grp[0:])  
        final_grp2=VGroup(new_terms1,hem_grp2[0:])
        self.play(final_grp.animate.shift(3*UP))
        self.play(final_grp2.animate.shift(3*UP))
        sum_zero=Tex('Sum of zero:').to_edge(LEFT)
        pro_zero=Tex('Product of zero:').next_to(sum_zero,DOWN)
        self.play(Write(sum_zero))
        self.play(Write(pro_zero))                
        sum_ans=MathTex('\\alpha','+','\\beta','=','2 + 4 = 6').next_to(sum_zero,RIGHT)
        pro_ans=MathTex('\\alpha','\\times','\\beta','=','2 \\times 4 = 8').next_to(pro_zero,RIGHT)
        self.play(Write(sum_ans))
        self.play(Write(pro_ans))
        zero_text=Tex('On comparing the equation we find that ').to_edge(DOWN)
        self.play(Write(zero_text))
        verify=MathTex('\\text{a=1;b=-6;c=8}').to_edge(RIGHT)
        self.play(Write(verify))
        self.play(FadeOut(zero_text))
        verify_sum=MathTex('\\frac{-b}{a}','=','\\frac{-(-6)}{1}','= 6').next_to(verify,DOWN)
        self.play(Write(verify_sum))
        last_baxxa=SurroundingRectangle(sum_ans)
        self.play(Create(last_baxxa))
        last_baxxa2=SurroundingRectangle(verify_sum)
        self.play(Create(last_baxxa2))
        verify_pro=MathTex('\\frac{c}{a}','=','\\frac{8}{1}','= 8').next_to(verify_sum,DOWN)
        self.play(Write(verify_pro))
        last_baxxa3=SurroundingRectangle(pro_ans)
        self.play(Create(last_baxxa3))
        last_baxxa4=SurroundingRectangle(verify_pro)
        self.play(Create(last_baxxa4))
        ending_txt=Tex('Hence we verified that').to_edge(DOWN)
        self.play(Write(ending_txt))
        ending_sabh=MathTex('\\alpha + \\beta = \\frac{-b}{a}') .next_to(pro_zero,DOWN)
        self.play(Write(ending_sabh)) 
              
        ending_sabh2=MathTex('\\alpha \\times  \\beta = \\frac{c}{a') .next_to(ending_sabh,DOWN)       
        self.play(Write(ending_sabh2))
        end_baxxa_grp=VGroup(last_baxxa,last_baxxa2,last_baxxa3,last_baxxa4)
        self.play(FadeOut(end_baxxa_grp))
        pro_sum_grp=VGroup(ending_sabh,ending_sabh2)
        self.play(FadeOut(ending_txt))
        self.play(pro_sum_grp.animate.shift(4.5*RIGHT))
        last_baxxa_last=SurroundingRectangle(pro_sum_grp)
        self.play(Create(last_baxxa_last))      


                
        
           
           