from manim import *
class QuadraticSquare(Scene):
    def construct(self):
#INTRO
        intro_text=Tex("Method of completing the square")
        self.play(Write(intro_text))
        self.play(FadeOut(intro_text))
        intr_txt=Tex("Let's learn with an example")
        self.play(Write(intr_txt))
        self.play(FadeOut(intr_txt))
        int_exn=MathTex('2','x^{2}','-3x','-6','= 0').to_edge(LEFT)
        self.play(Write(int_exn))
        intr_txt2=MathTex('\\text{Making the coefficient of } x^{2} \\text{as 1  by dividing the whole equation by the coefficient of } x^{2} }', font_size=30 ).to_edge(DOWN)
        self.play(Write(intr_txt2))
        self.play(Indicate(int_exn[0]))
        self.play(FadeOut(intr_txt2))
    
        line =Line(int_exn.get_edge_center(RIGHT),int_exn.get_edge_center(LEFT)).next_to(int_exn,DOWN)
        self.play(Create(line))
        two_cpy=int_exn[0].copy()
        self.play(two_cpy.animate.shift(0.8*DOWN,1.8*RIGHT))
        self.wait(2)
        fde_grp=VGroup(line,int_exn,two_cpy)
        int_new=MathTex('\\frac{2x^{2}}{2}','-','\\frac{3x}{2}','-','\\frac{6}{2}','=','0').to_edge(LEFT)
        self.play(ReplacementTransform(fde_grp,int_new))
        self.play(Indicate(int_new[0][0]))
        self.play(Indicate(int_new[0][4]))
        fde_grp1=VGroup(int_new[0][0],int_new[0][4],int_new[0][3])
        self.play(FadeOut(fde_grp1))
        fade_grp3=VGroup(int_new[0][1],int_new[0][2])
        self.play(fade_grp3.animate.shift(0.4*DOWN))
        self.play(Indicate(int_new[4][0]))
        self.play(Indicate(int_new[4][2]))
        fde_grp2=VGroup(int_new[4][0],int_new[4][1],int_new[4][2])
        new_three=MathTex('3').next_to(int_new[3],RIGHT)
        self.play(ReplacementTransform(fde_grp2,new_three)) 
        x_txt=MathTex('\\text{Add the square of half the coefficient of x to LHS and RHS}').to_edge(DOWN)
        self.play(Write(x_txt))
        
        indicate_grp=VGroup(int_new[1],int_new[2][0],int_new[2][3])
        
        self.play(Indicate(indicate_grp))
        shift_grp=VGroup(int_new[1],int_new[2][0],int_new[2][2],int_new[2][3]).copy()
        x_txt1=MathTex('(','\\frac{-3}{2}','\\times','\\frac{1}{2}',')^{2}','=','\\frac{9}{16}').to_edge(RIGHT)
        self.play(Write(x_txt1[0:5]))  
        self.wait(1)    
        self.play(Write(x_txt1[5:7])) 
        self.play(FadeOut(x_txt1[0:6]))
        self.play(Indicate(x_txt1[6]))
        self.play(FadeOut(x_txt1[6]))
        x_new_eq=MathTex('x^{2}','+','\\frac{9}{16}','-','\\frac{3}{2}','x','- 3','=','0','+','\\frac{9}{16}').to_edge(LEFT)
        
        x_fde_grp=VGroup(int_new[0][1],int_new[0][2],int_new[1],int_new[2],int_new[3],new_three,int_new[5],int_new[6])
        self.play(ReplacementTransform(x_fde_grp,x_new_eq))
        self.play(FadeOut(x_txt))
        self.play(x_new_eq[6].animate.shift(3*RIGHT))
        pos=MathTex('+ 3 ').next_to(x_new_eq[10],RIGHT)
        self.play(ReplacementTransform(x_new_eq[6],pos))
        x_fde=VGroup(x_new_eq[8],x_new_eq[9])
        
        self.play(FadeOut(x_fde))
        self.play(x_new_eq[7].animate.shift(0.8*RIGHT))
        
        self.play(Indicate(x_new_eq[2]))
        mve_grp=VGroup(x_new_eq[3],x_new_eq[4],x_new_eq[5])
        self.play(mve_grp.animate.shift(0.4*RIGHT))
        new_x=MathTex('(\\frac{3}{4})^{2}').next_to(x_new_eq[1],RIGHT)
        self.play(ReplacementTransform(x_new_eq[2],new_x))
        
        x_indicate_new=VGroup(x_new_eq[4],x_new_eq[5])
        self.play(Indicate(x_indicate_new))
        new_x_1=MathTex("2(x)","\\times","\\frac{3}{4}").next_to(x_new_eq[3],RIGHT)  
        self.play(ReplacementTransform(x_indicate_new,new_x_1))
        lcm_indicate=VGroup(x_new_eq[10],pos)
        self.play(Indicate(lcm_indicate))
        lcm=MathTex("\\frac{9+48}{16}").next_to(x_new_eq[7],RIGHT)
        self.play(ReplacementTransform(lcm_indicate,lcm))
        lcm_txt=Tex('As the sign is negative').to_edge(DOWN)
        self.play(Write(lcm_txt))
        self.play(Indicate(x_new_eq[3]))
        lcm_txt2=MathTex("\\text{We will use  the property }","(a-b)^{2}").to_edge(DOWN)
        self.play(ReplacementTransform(lcm_txt,lcm_txt2))
        transform_grp=VGroup(x_new_eq[0],x_new_eq[1],x_new_eq[3],new_x,new_x_1)
        final_x=MathTex("(","x","-","\\frac{3}{4}",")","^{2}").next_to(x_new_eq[7],LEFT)
        self.play(ReplacementTransform(transform_grp,final_x))
        
        final_lcm=MathTex("\\frac{57}{16}").next_to(x_new_eq[7],RIGHT)
        self.play(ReplacementTransform(lcm,final_lcm))
        self.play(FadeOut(lcm_txt2))
        self.play(FadeOut(final_x[5]))
        self.wait(1)
        
        final_final_lcm=MathTex("\\sqrt{\\frac{57}{16}}").next_to(x_new_eq[7],RIGHT)
        self.play(Transform(final_lcm,final_final_lcm))
        self.wait(1)
        akhri_lcm=MathTex("\\pm","{\\frac{\\sqrt{57}}{4}}").next_to(x_new_eq[7],RIGHT)
        
        self.play(Transform(final_lcm,akhri_lcm))
        brkt_grp=VGroup(final_x[0],final_x[4])
        self.play(FadeOut(brkt_grp))
        final_x_grp=VGroup(final_x[2],final_x[3])
        self.play(final_lcm.animate.shift(0.8*RIGHT))
        self.play(final_x_grp.animate.shift(2*RIGHT))
        self.play(FadeOut(final_x[2]))
        self.play(final_x[1].animate.shift(RIGHT))
        baxxa_grp=VGroup(final_x[1],x_new_eq[7],final_x[3],final_lcm)
        baxxa1=SurroundingRectangle(baxxa_grp)
        self.play(Create(baxxa1))
        self.play(FadeOut(baxxa1))
        cpy=baxxa_grp.copy()
        cpy2=baxxa_grp.copy()

        
        end1=MathTex("x","=","\\frac{3+\\sqrt{57}}{4}","\\hspace{1cm}","x","=","\\frac{3-\\sqrt{57}}{4}")
        self.play(Transform(baxxa_grp,end1))         
        
        
                

